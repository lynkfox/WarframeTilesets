@model WFTileCounter.ModelsView.TileDetailsViewModel

@{
    ViewData["Title"] = Model.TilesetName + " / " + Model.ShortTileName + " - \"" + (string.IsNullOrEmpty(Model.Tile.TileDetail.PopularName) ? "Popular Name to be Added" : Model.Tile.TileDetail.PopularName) + "\"";
}




    <h1>@Html.DisplayFor(x => x.TilesetName) - @Html.DisplayFor(x => x.ShortTileName) </h1>
<h3><i> "@(string.IsNullOrEmpty(Model.Tile.TileDetail.PopularName) ? "Popular Name to be Added" : Model.Tile.TileDetail.PopularName)" </i></h3>

<div class="container">
    <div class="row">

        <div class="col-md-4 mb-1 pb-1 justify-content-start">
            @if (Model.MapImages.Count() == 1)
            {
                var picture = Model.MapImages.First();

                <img src="@Url.Content(String.Format("~/img/tilesets/{0}", picture.ImagePath))" alt="@picture.AltText" CssClass="tooltips" class="rounded d-block w-100 tooltips" data-toggle="tooltip" data-placement="top" title="@Html.DisplayFor(x => picture.AltText)">
            }
            else
            {

                <div id="mapImagesCarousel" class="carousel slide" data-ride="carousel">

                    <div class="carousel-inner" role="listbox">
                        @foreach (var picture in Model.MapImages)
                        {
                            if (Model.MapImages.First() == picture)
                            {
                                <div class="carousel-item active">
                                    <img src="@Url.Content(String.Format("~/img/tilesets/{0}", picture.ImagePath))" alt="@picture.AltText" CssClass="tooltips" class="rounded d-block w-100 tooltips" data-toggle="tooltip" data-placement="top" title="@Html.DisplayFor(x => picture.AltText)">

                                </div>
                            }
                            else
                            {
                                <div class="carousel-item">
                                    <img src="@Url.Content(String.Format("~/img/tilesets/{0}", picture.ImagePath))" alt="@picture.AltText" CssClass="tooltips" class="rounded d-block w-100 tooltips" data-toggle="tooltip" data-placement="top" title="@Html.DisplayFor(x => picture.AltText) of @Model.Tile.Name">

                                </div>

                            }


                        }

                    </div>
                    <a class="carousel-control-prev" href="#mapImagesCarousel" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon mapPrev" aria-hidden="true"></span>
                        <span class="sr-only text-dark">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#mapImagesCarousel" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only text-dark">Next</span>
                    </a>



                </div>
            }
            @if (Model.Variants.Count > 0)
            {
                <div class="row">
                    <div class="col-md-12 mb-1 pb-1">
                        <strong>Variant Tiles:</strong>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div id="variants" class="list-group align-items-start  text-light">

                            @foreach (var variant in Model.Variants)
                            {
                                if (!string.IsNullOrEmpty(variant.VariantTileName))
                                {
                                    @Html.ActionLink(variant.VariantTileName, "ViewTile", "Tile", new { tileset = variant.TilesetPath, tilename = variant.TilePath }, new { @class = "list-group-item list-group-item-action list-group-item-dark", @style = "text-color:#007BFF" })
                                }

                            }

                        </div>

                    </div>



                </div>
            }


        </div>

        <div class="col-md-8 border border-light">
            <div class="row">
                <div class="col-md-6 mb-1 pb-1">
                    <strong>@Html.DisplayNameFor(x => x.Tile.Name)</strong>
                </div>
                <div class="col-md-6 mb-1 pb-1">
                    <strong>@Html.DisplayNameFor(x => x.Tile.TileDetail.PopularName)</strong>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6  border-bottom border-light mb-1  pb-1">
                    @Html.DisplayFor(x => x.Tile.Name)
                </div>
                <div class="col-md-6  border-bottom border-light mb-1 pb-1">
                    @Html.DisplayFor(x => x.Tile.TileDetail.PopularName)
                </div>
            </div>
            <div class="row">
                <div class="col-md-2 mb-1 pb-1">
                    <div class="w-100 mb-1 p-1 border-info border text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="Number of Alarm Consoles.">
                        @Html.DisplayNameFor(x => x.Tile.TileDetail.Consoles)
                    </div>
                </div>
                <div class="col-md-2 mb-1 pb-1 text-center">
                    @Html.DisplayFor(x => x.Tile.TileDetail.Consoles)
                </div>
                <div class="col-md-2 mb-1 pb-1">
                    <div class="w-100 mb-1 p-1 border-info border text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="Number of Exits.">
                        @Html.DisplayNameFor(x => x.Tile.TileDetail.Exits)
                    </div>
                </div>
                <div class="col-md-2 mb-1 pb-1 text-center">
                    @Html.DisplayFor(x => x.Tile.TileDetail.Exits)
                </div>
                <div class="col-md-2 mb-1 pb-1">
                    <div class="mw-100 mb-1 p-1 border-info border text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="Total number of Lockers (open and closed).">
                        @Html.DisplayNameFor(x => x.Tile.TileDetail.Lockers)
                    </div>
                </div>
                <div class="col-md-2  mb-1 pb-1 text-center">
                    @Html.DisplayFor(x => x.Tile.TileDetail.Lockers)
                </div>

            </div>
            <div class="row">
                <div class="col-md-2  mb-1 pb-1">
                    <div class="w-100 mb-1 p-1 border-info border text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="Number of Secret locations.">
                        @Html.DisplayNameFor(x => x.Tile.TileDetail.Secrets)
                    </div>
                </div>
                <div class="col-md-2 mb-1 pb-1 text-center">
                    @Html.DisplayFor(x => x.Tile.TileDetail.Secrets)
                </div>
                <div class="col-md-2  mb-1 pb-1">
                    <div class="w-100 mb-1 p-1 border-info border text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="Number of Potential Hazards (such as Breakable Windows).">
                        @Html.DisplayNameFor(x => x.Tile.TileDetail.Hazards)
                    </div>
                </div>
                <div class="col-md-2 mb-1 pb-1 text-center">
                    @Html.DisplayFor(x => x.Tile.TileDetail.Hazards)
                </div>
                @if (Model.TilesetName.Contains("Corpus"))
                {
                    <div class="col-md-2  mb-1 pb-1">
                        <div class="w-100 mb-1 p-1 border-info border text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="Number of Exits that always lead to a Loot Closet (Corpus Tilesets Only).">
                            @Html.DisplayNameFor(x => x.Tile.TileDetail.LootRooms)
                        </div>
                    </div>
                    <div class="col-md-2  mb-1 pb-1 text-center">
                        @Html.DisplayFor(x => x.Tile.TileDetail.LootRooms)
                    </div>
                }
            </div>

            <div class="row">
                <div class="col-md-2 mb-1 pb-1">
                    <div class="w-100 mb-1 p-1 border-info border text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="Potential Collectibles that might spawn here.">
                        Collectibles
                    </div>
                </div>
                <div class="col-md-10 mb-1">
                    <div class="d-flex justify-content-center flex-wrap">

                        @if (Model.Tile.TileDetail.CaptureSpawn)
                        {
                            <span><img src="~/img/markers/capturespawn.png" style="width:25px" alt="Capture Spawn" CssClass="tooltips" class="m-1 mt-2" data-toggle="tooltip" data-placement="top" title="Capture Target Spawn Tile"></span>
                        }
                        @if (Model.Tile.TileDetail.SimarisSpawn)
                        {
                            <span><img src="~/img/markers/simarisspawn.png" style="width:25px" alt="Simaris Spawn" CssClass="tooltips" class="m-1 mt-2" data-toggle="tooltip" data-placement="top" title="Simaris Scan Spawn Tile"></span>

                        }
                        @if (Model.Tile.TileDetail.Cache)
                        {
                            <span><img src="~/img/markers/cachemarker.png" style="width:25px" alt="Cache Location" CssClass="tooltips" class="m-1 mt-2" data-toggle="tooltip" data-placement="top" title="Cache Location"></span>

                        }
                        @if (Model.Tile.TileDetail.Cephalon)
                        {
                            <span><img src="~/img/markers/cephalon.png" style="width:25px" alt="Cephalon Fragment" CssClass="tooltips" class="m-1 mt-2" data-toggle="tooltip" data-placement="top" title="Cephalon Fragment"></span>

                        }
                        @if (Model.Tile.TileDetail.Somachord)
                        {
                            <span><img src="~/img/markers/somachord.png" style="width:25px" alt="Somachord Fragment" CssClass="tooltips" class="m-1 mt-2" data-toggle="tooltip" data-placement="top" title="Somachord Fragment"></span>

                        }
                        @if (Model.Tile.TileDetail.FrameFighter)
                        {
                            <span><img src="~/img/markers/framefighter.png" style="width:25px" alt="Frame Fighter Fragment" CssClass="tooltips" class="m-1 mt-2" data-toggle="tooltip" data-placement="top" title="Frame Fighter Fragment"></span>

                        }
                        @if (Model.Tile.TileDetail.Ayatan)
                        {
                            <span><img src="~/img/markers/ayatanstatue.png" style="width:25px" alt="Ayatan Statue" CssClass="tooltips" class="m-1 mt-2" data-toggle="tooltip" data-placement="top" title="Ayatan Statue"></span>

                        }
                        @if (Model.Tile.TileDetail.Medallion)
                        {
                            <span><img src="~/img/markers/syndicatemedallion.png" style="width:25px" alt="Syndicate Medallion" CssClass="tooltips" class="m-1 mt-2" data-toggle="tooltip" data-placement="top" title="Syndicate Medallion"></span>

                        }
                        @if (Model.Tile.TileDetail.RareContainer)
                        {
                            <span><img src="~/img/markers/lootmarker.png" style="width:25px" alt="Rare Loot Chest" CssClass="tooltips" class="m-1 mt-2" data-toggle="tooltip" data-placement="top" title="Rare Loot Chest"></span>

                        }

                    </div>

                </div>



            </div>

            <div class="row ">
                <div class="col-md-12 mb-1 pb-1 text-center ">
                    <div class="d-flex justify-content-center flex-wrap">
                        @if (Model.Tile.TileDetail.PlayerSpawn)
                        {
                            <span class="d-sm-inline-flex m-1 p-1 bg-light text-dark text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="This tile is a potential Spawn point.">
                                Potential Spawn
                            </span>
                        }
                        @if (Model.Tile.TileDetail.PlayerExtract)
                        {
                            <span class="d-sm-inline-flex m-1 p-1 bg-success text-light text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="This tile is an Extraction point.">
                                Extraction Point
                            </span>
                        }
                        @if (Model.Tile.TileDetail.MobileDefense)
                        {
                            <span class="d-sm-inline-flex m-1 p-1 bg-warning text-dark text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="This tile may contain a Mobile Defense objective point.">
                                Mobile Defense
                            </span>

                        }
                        @if (Model.Tile.TileDetail.DefectionSpawn)
                        {
                            <span class="d-sm-inline-flex m-1 p-1 bg-primary text-light text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="This tile is a place where Defectors may spawn.">
                                Defectors Spawn
                            </span>
                        }
                        @if (Model.Tile.TileDetail.DefectionRest)
                        {
                            <span class="d-sm-inline-flex m-1 p-1 bg-info text-dark text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="This tile is a potential place for Defection Life Support Pylons.">
                                Defection Support
                            </span>
                        }
                        @if (Model.Tile.TileDetail.SurvivalPylon)
                        {
                            <span class="d-sm-inline-flex m-1 p-1 bg-warning text-muted text-wrap font-weight-bold rounded-lg tooltips" data-toggle="tooltip" data-placement="top" title="This tile is a potential place for Survival Life Support Pylons.">
                                Life Support Pylon
                            </span>
                        }
                    </div>

                </div>


            </div>

            <div class="row">
                <div class="col-md-12  mb-1 pb-1">
                    <strong>@Html.DisplayNameFor(x => x.Tile.TileDetail.Description)</strong>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12  mb-1 pb-1">
                    @Html.DisplayFor(x => x.Tile.TileDetail.Description)
                </div>
            </div>

            <div class="row">

                <div class="col-md-4 mb-1 pb-1">
                    <div class="row">
                        <div class="col-md-12">
                            <strong>@Html.DisplayNameFor(x => x.Tile.TileDetail.SecretDescription)</strong>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.DisplayFor(x => x.Tile.TileDetail.SecretDescription)
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-1 pb-1">
                    <div class="row">
                        <div class="col-md-12">
                            <strong>@Html.DisplayNameFor(x => x.Tile.TileDetail.HazardDescription)</strong>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.DisplayFor(x => x.Tile.TileDetail.HazardDescription)
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-1 pb-1">
                    <div class="row">
                        <div class="col-md-12">
                            <strong>@Html.DisplayNameFor(x => x.Tile.TileDetail.BehindName)</strong>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            @Html.DisplayFor(x => x.Tile.TileDetail.BehindName)
                        </div>
                    </div>
                </div>
            </div>




        </div>
    </div>
   

    <div class="row">

        <div class="col-md-12">

            <div class="row">
                <div class="col-mid-12 pb-1 mb-1 mt-2">
                    <div id="uploadedImagesCarousel" class="carousel slide" data-ride="carousel">
                        <ol class="carousel-indicators">
                            <li data-target="#uploadedImagesCarousel" data-slide-to="0" class="active"></li>
                            @for (int x = 1; x < Model.Images.Count(); x++)
                            {
                                <li data-target="#uploadedImagesCarousel" data-slide-to="@x" class="active"></li>
                            }
                        </ol>
                        <div class="carousel-inner">
                            @foreach (var picture in Model.Images)
                            {
                                if (Model.Images.First() == picture)
                                {
                                    <div class="carousel-item active">
                                        <img class="d-block w-100" src="@Url.Content(String.Format("~/img/tilesets/{0}", picture.ImagePath))" alt="@picture.AltText">
                                        <div class="carousel-caption d-none d-md-block">
                                            <h2>@Html.DisplayFor(x => picture.ViewName)</h2>
                                            
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="carousel-item">
                                        <img class="d-block w-100" src="@Url.Content(String.Format("~/img/tilesets/{0}", picture.ImagePath))" alt="@picture.AltText">
                                        <div class="carousel-caption d-none d-md-block">
                                            <h2>@Html.DisplayFor(x => picture.ViewName)</h2>
                                            
                                        </div>
                                    </div>

                                }


                            }

                        </div>
                        <a class="carousel-control-prev" href="#uploadedImagesCarousel" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#uploadedImagesCarousel" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>



                    </div>


                </div>
            </div>

        </div>

    </div>

</div>

